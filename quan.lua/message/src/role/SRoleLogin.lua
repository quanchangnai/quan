---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by quanchangnai.
--- DateTime: 2019/9/4 15:01
---

local Buffer = require("Buffer")
local Message = require("Message")

local RoleInfo = require("role.RoleInfo")
local UserInfo = require("role.UserInfo")

---角色登录
local SRoleLogin = {  }

function SRoleLogin.new(args)
    assert(args == nil or type(args) == "table", "参数错误")
    args = args or {}
    local instance = {
        ---消息序号
        seq = args[seq] or 0,
        ---角色id
        roleId = args[roleId] or 0,
        --角色名
        roleName = args[roleName] or "",
        roleInfo = args[roleInfo] or RoleInfo.new(),
        roleInfoList = args[roleInfoList] or {},
        roleInfoSet = args[roleInfoSet] or {},
        roleInfoMap = args[roleInfoMap] or {},
        ---用户信息
        userInfo = args[userInfo]
    }
    Message.instance(instance, SRoleLogin)
    return instance
end

function SRoleLogin.getId()
    return 763075
end

function SRoleLogin:encode(buffer)
    buffer = Message.encode(self, buffer)

    buffer:writeLong(self.roleId);
    buffer:writeString(self.roleName);
    self.roleInfo:encode(buffer)

    buffer:writeInt(#self.roleInfoList);
    for i, v in ipairs(self.roleInfoList) do
        v:encode(buffer)
    end

    buffer:writeInt(#self.roleInfoSet);
    for i, v in ipairs(self.roleInfoSet) do
        v:encode(buffer)
    end

    buffer:writeInt(mapSize(self.roleInfoMap));
    for k, v in pairs(self.roleInfoMap) do
        buffer:writeLong(k);
        v:encode(buffer)
    end

    buffer:writeBool(self.userInfo ~= nil);
    if self.userInfo ~= nil then
        self.userInfo:encode(buffer)
    end

    return buffer
end

function SRoleLogin:decode(bytes)
    assert(bytes ~= nil, "参数[bytes]不能为空")
    self:decode(Buffer.new(bytes))
end

function SRoleLogin:decode(buffer)
    assert(buffer ~= nil, "参数[buffer]不能为空")
    Message.decode(self, buffer)

    self.roleId = buffer:readLong()
    self.roleName = buffer:readString()
    self.roleInfo:decode(buffer)

    for i = 1, buffer:readInt() do
        local value = RoleInfo.new()
        value:decode(buffer)
        table.insert(self.roleInfoList, value)
    end

    for i = 1, buffer:readInt() do
        local value = RoleInfo.new()
        value:decode(buffer)
        table.insert(self.roleInfoSet, value)
    end

    for i = 1, buffer:readInt() do
        local key = buffer:readLong()
        local value = RoleInfo.new()
        value:decode(buffer)
        self[key] = value
    end

    if buffer:readBool() then
        self.userInfo = self.userInfo or UserInfo.new()
        self.userInfo:encode(buffer)
    end
end

return SRoleLogin